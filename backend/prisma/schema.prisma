// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ScreenType {
  parent
  child
  normal
}

enum FormType {
  page 
  dialog
  null
}

model screens{
  id          Int      @id @default(autoincrement())
  name        String
  displayName String
  menuLabel   String
  type        ScreenType
  order       Int
  icon        String?
  formType    FormType?
  parentId    Int?  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/////////////////////////////////////////////////////////////////////


model peopleTitles {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  people people[] @relation()
}

/////////////////////////////////////////////////////////////////////

model peopleRoles {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  peopleRolesDataFK       peopleRolesData[]
}
/////////////////////////////////////////////////////////////////////

enum genderType {
  m
  f
} 

/////////////////////////////////////////////////////////////////////
model people {
    id Int @id @default(autoincrement())
    fullName String
    titleIdFK Int
    peopleRolesDataFK peopleRolesData[]
    hasFamily Boolean @default(false)
    dateOfBirth DateTime?
    gender genderType
    address String?
    complement String?
    city String?
    suburb String?
    uf String?
    cep String?
    phone1 String?
    phone1IsWhatsapp Boolean?
    phone2 String?
    photoUrl String?
    email String?
    society String?
    ebdClassroom String?
    isActiveEBD Boolean @default(false)
    isActive Boolean @default(true)  
    isMember Boolean @default(false)
    isUser Boolean @default(false)
    createdAt   DateTime @default(now())
    updatedAt     DateTime @updatedAt
    peopleTitles peopleTitles @relation( fields: [titleIdFK], references: [id])
    kinsRelationsA kinsRelations[] @relation("peopleA")
    kinsRelationsB kinsRelations[] @relation("peopleB")
    }

/////////////////////////////////////////////////////////////////////
model peopleRolesData {
  peopleIdFK    Int
  roleIdFK      Int
  createdAt   DateTime @default(now())
  updatedAt     DateTime @updatedAt
  people      people?       @relation(fields: [peopleIdFK], references: [id])
  peopleRoles peopleRoles?   @relation(fields: [roleIdFK], references: [id])
     @@id([peopleIdFK, roleIdFK])
  
}
/////////////////////////////////////////////////////////////////////

model churchBranches {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

/////////////////////////////////////////////////////////////////////

model kinsRelations {
  id          Int      @id @default(autoincrement())
  idKinA      Int
  idKinB      Int
  relation    String
  peopleA      people      @relation(name: "peopleA",fields: [idKinA], references: [id])
  peopleB      people      @relation(name: "peopleB",fields: [idKinB], references: [id])
}

/////////////////////////////////////////////////////////////////////

model kinsLabels {
  id Int @id @default(autoincrement())
  nameA String
  nameB String
}
/////////////////////////////////////////////////////////////////////

// model infraLogs {
//   id          Int      @id @default(autoincrement())
//   message String
//   peopleIdFK  Int? 
//   createdAt   DateTime @default(now())
//   updatedAt     DateTime @updatedAt
//   infraLogsPeople people @relation(fields: [peopleIdFK], references: [id])
// }

